name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.11"]

        # os: [ubuntu-latest, windows-latest, macos-latest]
        # python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    - name: Checkout nexusql
      uses: actions/checkout@v4
      with:
        repository: Fiberwise-AI/nexusql
        path: nexusql
    - name: Install nexusql
      run: |
        cd nexusql
        pip install -e .
    - name: Set up Python ${{ matrix.python-version }}'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]"

    - name: Run unit tests only
      env:
        REDIS_URL: redis://localhost:6379
      run: |
        pytest tests/unit/ -v --tb=short \
          --cov=ia_modules \
          --cov-report=xml \
          --cov-report=term \
          --cov-report=html \
          --cov-config=pyproject.toml

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy

    - name: Lint with ruff
      run: |
        ruff check . --output-format=github
      continue-on-error: true

    - name: Type check with mypy
      run: |
        mypy ia_modules --ignore-missing-imports
      continue-on-error: true

  integration:
    runs-on: ubuntu-latest
    needs: test
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_metrics
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
          MYSQL_DATABASE: ia_modules_test
        options: >-
          --health-cmd "mysqladmin ping -h localhost -u testuser -ptestpass"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 3306:3306

      # MSSQL: Commented out - can be enabled when needed locally
      # mssql:
      #   image: mcr.microsoft.com/mssql/server:2022-latest
      #   env:
      #     ACCEPT_EULA: Y
      #     SA_PASSWORD: TestPass123!
      #     MSSQL_PID: Express
      #   options: >-
      #     --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPass123! -Q 'SELECT 1'"
      #     --health-interval 10s
      #     --health-timeout 5s
      #     --health-retries 10
      #   ports:
      #     - 1433:1433

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      prometheus:
        image: prom/prometheus:latest
        options: >-
          --health-cmd "wget --quiet --tries=1 --spider http://localhost:9090/-/healthy || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 9090:9090

      otel-collector:
        image: otel/opentelemetry-collector-contrib:latest
        options: >-
          --health-cmd "wget --quiet --tries=1 --spider http://localhost:13133/ || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 4317:4317
          - 4318:4318
          - 8888:8888
          - 13133:13133

      grafana:
        image: grafana/grafana:latest
        env:
          GF_SECURITY_ADMIN_PASSWORD: admin
          GF_SECURITY_ADMIN_USER: admin
          GF_AUTH_ANONYMOUS_ENABLED: "true"
          GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
        options: >-
          --health-cmd "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 3000:3000

      jaeger:
        # Using Jaeger v2 (EOL for v1 is Dec 31, 2025)
        # https://www.jaegertracing.io/download/
        # NOTE: Jaeger v2 maintains API compatibility with v1
        # Tests use standard HTTP API (/api/services, /api/traces, etc.)
        # OTLP ports NOT exposed to avoid conflict with otel-collector
        image: jaegertracing/jaeger:latest
        env:
          COLLECTOR_OTLP_ENABLED: "true"
        options: >-
          --health-cmd "wget --quiet --tries=1 --spider http://localhost:16686/ || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 16686:16686  # Jaeger UI (also used for health check)
          - 14268:14268  # Jaeger Collector HTTP
          # OTLP ports (4317/4318) not exposed - use otel-collector instead

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install ODBC Driver for SQL Server (for MSSQL)
      run: |
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18
        sudo apt-get install -y unixodbc-dev

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]"

    - name: Run PostgreSQL integration tests
      env:
        TEST_POSTGRESQL_URL: postgresql://postgres:postgres@localhost:5432/test_metrics
        REDIS_URL: redis://localhost:6379
      run: |
        pytest tests/integration/ -v --tb=short -m postgres

    - name: Run MySQL integration tests
      env:
        TEST_MYSQL_URL: mysql://testuser:testpass@localhost:3306/ia_modules_test
      run: |
        pytest tests/integration/test_database_mysql.py -v --tb=short
      continue-on-error: true

    # MSSQL tests: Commented out - uncomment when MSSQL service is enabled
    # - name: Run MSSQL integration tests
    #   env:
    #     TEST_MSSQL_URL: mssql://sa:TestPass123!@localhost:1433/master
    #   run: |
    #     pytest tests/integration/test_database_mssql.py -v --tb=short
    #   continue-on-error: true

    - name: Run comprehensive database tests (PostgreSQL & MySQL only)
      env:
        TEST_POSTGRESQL_URL: postgresql://postgres:postgres@localhost:5432/test_metrics
        TEST_MYSQL_URL: mysql://testuser:testpass@localhost:3306/ia_modules_test
        # TEST_MSSQL_URL: mssql://sa:TestPass123!@localhost:1433/master  # Commented out
      run: |
        # Run tests, excluding MSSQL-specific tests
        pytest tests/integration/test_database_complete.py -v --tb=short -k "not mssql"
        pytest tests/integration/test_database_comprehensive.py -v --tb=short -k "not mssql"
      continue-on-error: true

    - name: Run Redis integration tests
      env:
        REDIS_URL: redis://localhost:6379
      run: |
        pytest tests/integration/ -v --tb=short -m redis

    - name: Run observability integration tests
      env:
        PROMETHEUS_URL: http://localhost:9090
        OTEL_COLLECTOR_URL: http://localhost:4318
        GRAFANA_URL: http://localhost:3000
        JAEGER_URL: http://localhost:16686
      run: |
        pytest tests/integration/test_observability_integration.py -v --tb=short
      continue-on-error: true  # Don't fail build if observability tests fail

    - name: Run all other integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_metrics
        TEST_POSTGRESQL_URL: postgresql://postgres:postgres@localhost:5432/test_metrics
        TEST_MYSQL_URL: mysql://testuser:testpass@localhost:3306/ia_modules_test
        # TEST_MSSQL_URL: mssql://sa:TestPass123!@localhost:1433/master  # Commented out
        REDIS_URL: redis://localhost:6379
        PROMETHEUS_URL: http://localhost:9090
        OTEL_COLLECTOR_URL: http://localhost:4318
        GRAFANA_URL: http://localhost:3000
        JAEGER_URL: http://localhost:16686
      run: |
        pytest tests/integration/ -v --tb=short -m "integration and not (postgres or mysql or mssql or redis or observability)" -k "not mssql"

  e2e:
    runs-on: ubuntu-latest
    needs: test
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
          MYSQL_DATABASE: ia_modules_test
        options: >-
          --health-cmd "mysqladmin ping -h localhost -u testuser -ptestpass"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 3306:3306

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]"

    - name: Run e2e tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_e2e
        TEST_POSTGRESQL_URL: postgresql://postgres:postgres@localhost:5432/test_e2e
        TEST_MYSQL_URL: mysql://testuser:testpass@localhost:3306/ia_modules_test
        REDIS_URL: redis://localhost:6379
      run: |
        pytest tests/e2e/ -v --tb=short
      continue-on-error: true  # Don't fail build if e2e tests fail

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/


"""Synthesis Agent - Combines all agent insights into final output"""

from typing import Dict, Any, Optional
from ia_modules.pipeline.core import PipelineStep


class SynthesisAgentStep(PipelineStep):
    """
    Final agent that synthesizes all collaboration results into
    a comprehensive output with full context.
    """

    def __init__(self, name: str, config: Optional[Dict[str, Any]] = None):
        super().__init__(name, config)
        self.role = config.get("role", "Synthesis Agent")

    async def run(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Synthesize final output from all agents"""

        task = data.get("task", "")
        execution_history = data.get("execution_history", [])
        final_quality = data.get("quality_score", 0.0)
        total_iterations = data.get("iteration", 1)

        # Extract key outputs from each agent type
        plans = []
        executions = []
        critiques = []
        metacognitions = []

        for entry in execution_history:
            if entry["agent"] == "planner":
                plans.append(entry["output"])
            elif entry["agent"] == "executor":
                executions.append(entry["output"])
            elif entry["agent"] == "critic":
                critiques.append(entry["output"])
            elif entry["agent"] == "metacognition":
                metacognitions.append(entry["output"])

        # Build comprehensive synthesis
        synthesis = {
            "agent": "Synthesis Agent",
            "task": task,
            "collaboration_summary": {
                "total_iterations": total_iterations,
                "agents_participated": ["Planning", "Execution", "Reflection", "Metacognition"],
                "final_quality_score": final_quality,
                "patterns_applied": ["planning", "tool_use", "reflection", "metacognition"]
            },
            "iteration_breakdown": [],
            "final_output": "",
            "insights": [],
            "recommendations": []
        }

        # Summarize each iteration
        for i in range(1, total_iterations + 1):
            iter_plan = next((p for p in plans if p.get("iteration") == i), {})
            iter_exec = next((e for e in executions if e.get("iteration") == i), {})
            iter_critique = next((c for c in critiques if c.get("iteration") == i), {})
            iter_meta = next((m for m in metacognitions if m.get("iteration") == i), {})

            synthesis["iteration_breakdown"].append({
                "iteration": i,
                "steps_planned": iter_plan.get("total_steps", 0),
                "tools_used": len(set(iter_exec.get("tools_used", []))),
                "quality_score": iter_critique.get("overall_quality", 0),
                "strategy_adjustments": len(iter_meta.get("strategy_adjustments", []))
            })

        # Extract insights
        if critiques:
            last_critique = critiques[-1]
            synthesis["insights"] = last_critique.get("strengths", [])

        if metacognitions:
            last_meta = metacognitions[-1]
            synthesis["recommendations"] = last_meta.get("strategy_adjustments", [])

        # Generate final output
        synthesis["final_output"] = f"""# Multi-Agent Collaboration Results

## Task
{task}

## Collaboration Summary
- **Iterations Completed:** {total_iterations}
- **Final Quality Score:** {final_quality:.2f}
- **Agents Participated:** {', '.join(synthesis['collaboration_summary']['agents_participated'])}
- **Patterns Applied:** {', '.join(synthesis['collaboration_summary']['patterns_applied'])}

## Process Evolution

"""

        for breakdown in synthesis["iteration_breakdown"]:
            synthesis["final_output"] += f"""### Iteration {breakdown['iteration']}
- Planned {breakdown['steps_planned']} execution steps
- Utilized {breakdown['tools_used']} different tools
- Achieved quality score: {breakdown['quality_score']:.2f}
- Generated {breakdown['strategy_adjustments']} strategy adjustments

"""

        synthesis["final_output"] += f"""
## Key Insights
{chr(10).join(f'• {insight}' for insight in synthesis['insights']) if synthesis['insights'] else '• Comprehensive task completion achieved'}

## Recommendations
{chr(10).join(f'• {rec}' for rec in synthesis['recommendations']) if synthesis['recommendations'] else '• No further improvements needed'}

## Conclusion
The multi-agent collaboration successfully completed the task through {total_iterations} iteration(s),
achieving a final quality score of {final_quality:.2f}. The agents worked together effectively,
with each contributing their specialized capabilities through established agentic design patterns.

---
*Generated by Multi-Agent Collaboration Pipeline*
"""

        # Add to execution history
        data["execution_history"].append({
            "agent": "synthesis",
            "iteration": total_iterations,
            "action": "synthesized_final_output",
            "output": synthesis
        })

        return {
            **data,
            "synthesis": synthesis,
            "final_output": synthesis["final_output"],
            "current_step": "synthesis"
        }
